name: "🚀 Deploy to IONOS"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SITE_URL: https://steegmuellertransporte.de
      REMOTE_PATH: /steegmuellertransporte.de

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: "📦 Install dependencies"
        run: npm ci

      - name: "🧪 Test EmailJS Config (Smoke Test)"
        env:
          NUXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.NUXT_PUBLIC_EMAILJS_PUBLIC_KEY }}
          NUXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.NUXT_PUBLIC_EMAILJS_SERVICE_ID }}
          NUXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.NUXT_PUBLIC_EMAILJS_TEMPLATE_ID }}
        run: |
          if [ -z "$NUXT_PUBLIC_EMAILJS_PUBLIC_KEY" ]; then
            echo "❌ FEHLER: EMAILJS_PUBLIC_KEY Secret fehlt!"
            exit 1
          fi
          echo "✅ EmailJS Secrets sind gesetzt"

      - name: "🏗️ Build Nuxt app"
        env:
          NUXT_PUBLIC_SITE_URL: ${{ env.SITE_URL }}
          NUXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.NUXT_PUBLIC_EMAILJS_PUBLIC_KEY }}
          NUXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.NUXT_PUBLIC_EMAILJS_SERVICE_ID }}
          NUXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.NUXT_PUBLIC_EMAILJS_TEMPLATE_ID }}
        run: npm run generate

      - name: "🧭 Detect output dir"
        id: out
        run: |
          set -e
          if [ -d ".output/public" ]; then
            OUT=".output/public"
          elif [ -d "dist" ]; then
            OUT="dist"
          else
            echo "❌ Kein Output-Ordner gefunden"
            exit 1
          fi

          if [ ! -f "$OUT/index.html" ]; then
            echo "❌ $OUT/index.html fehlt"
            exit 1
          fi

          echo "OUTPUT_DIR=$OUT" >> $GITHUB_OUTPUT
          echo "✅ Output gefunden: $OUT"

      - name: "📁 Prepare deployment files"
        run: |
          set -e
          rm -rf deploy
          mkdir -p deploy
          cp -r "${{ steps.out.outputs.OUTPUT_DIR }}"/* deploy/

          cat > deploy/.htaccess << 'HTACCESS_EOF'
          RewriteEngine On

          RewriteCond %{SERVER_PORT} 80
          RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule ^ index.html [QSA,L]

          AddType image/svg+xml .svg
          AddType font/woff2 .woff2
          AddType application/manifest+json .webmanifest

          <IfModule mod_deflate.c>
            AddOutputFilterByType DEFLATE text/plain text/html text/xml text/css application/xml application/xhtml+xml application/rss+xml application/javascript application/x-javascript application/json image/svg+xml
          </IfModule>

          <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/html "access plus 0 seconds"
            ExpiresByType text/css "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/gif "access plus 1 year"
            ExpiresByType image/webp "access plus 1 year"
            ExpiresByType image/avif "access plus 1 year"
            ExpiresByType image/svg+xml "access plus 1 year"
            ExpiresByType font/woff2 "access plus 1 year"
          </IfModule>

          <FilesMatch "\.(html)$">
            Header set Cache-Control "no-store, no-cache, must-revalidate, max-age=0"
            Header set Pragma "no-cache"
          </FilesMatch>

          <FilesMatch "\.(css|js|png|jpe?g|gif|webp|avif|svg|woff2)$">
            Header set Cache-Control "public, max-age=31536000, immutable"
          </FilesMatch>

          <IfModule mod_headers.c>
            Header always set X-Content-Type-Options "nosniff"
            Header always set X-Frame-Options "SAMEORIGIN"
            Header always set Referrer-Policy "strict-origin-when-cross-origin"
            Header set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://www.google-analytics.com https://api.emailjs.com; manifest-src 'self'; base-uri 'self'; frame-ancestors 'self'"
            Header set Permissions-Policy "camera=(), microphone=(), geolocation=()"
          </IfModule>
          HTACCESS_EOF

          echo "✅ Deploy-Ordner vorbereitet"

      - name: "🚚 Deploy via SFTP (with lftp)"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          set -e

          # Install lftp (more robust than wlixcc action)
          sudo apt-get update -qq
          sudo apt-get install -y lftp

          echo "📤 Uploading files via SFTP with lftp..."

          # Use lftp with mirror command (more reliable for large dirs)
          lftp -u "${{ secrets.IONOS_USERNAME }},${{ secrets.IONOS_PASSWORD }}" \
            sftp://${{ secrets.IONOS_HOST }}:22 << 'LFTP_EOF'
          set sftp:auto-confirm yes
          set sftp:connect-program "ssh -o StrictHostKeyChecking=no"
          set net:timeout 60
          set net:max-retries 3
          set net:reconnect-interval-base 5
          mirror --verbose --reverse --delete --parallel=4 ./deploy ${{ env.REMOTE_PATH }}
          bye
          LFTP_EOF

          echo "✅ SFTP Upload complete!"

      - name: "✅ Deployment Summary"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 DEPLOYMENT ERFOLGREICH"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌐 Live URL: ${{ env.SITE_URL }}"
          echo "📦 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
